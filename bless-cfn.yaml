AWSTemplateFormatVersion: '2010-09-09'
Description: 'Automated BLESS CFN'

# Input Parameters
Parameters:
  ami:
    Type: String
    Description: The AMI id to use
  iamprofile:
    Type: String
    Description: The IAM instance profile for the bastion.
  key:
    Type: String
  kmsalias:
    Type: String
    Description: Your kms alias
  subnets:
    Type: CommaDelimitedList
    Description: The List of subnets to attempt to launch a bastion host in.
  password:
    Type: String
    Description: Password for your key.
    NoEcho: true
  public:
    Type: String
    Description: Do you wnt a public IP for this bastion?.
    Default: false    
  user:
    Type: String
    Description: The user this bastion is for.   
  vpc:
    Type: String
    Description: The VPC ID for the Bastion host, usually the cloud ops build VPC
  yourcidr:
    Type: String
    Description: The CIDR fromwhich you are connecting to the Bastion   
  zone:
    Type: String
    Description: The DNS zone to use when creating a dns entry.  If this is blank, no entry will be created.
    
Resources:

  EIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: !Ref vpc

  BastionSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Join [-, [bastion-sg, !Ref user]]
      GroupDescription: Enable SSH access to bastion via port 22
      VpcId: !Ref vpc
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !Ref yourcidr
        - IpProtocol: icmp
          FromPort: 3
          ToPort: 4
          CidrIp: 10.0.0.0/16
      Tags:
        - Key: Name
          Value: !Join [-, [bastion-sg, !Ref user]]

  BastionAsg:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      DesiredCapacity: 1
      HealthCheckGracePeriod: 300
      LaunchConfigurationName: !Ref BastionLc
      MaxSize: 1
      MinSize: 1
      Tags:
        -
          Key: node
          Value: bastion
          PropagateAtLaunch: true
        -
          Key: Name
          Value: !Join ['',[bastion-, !Ref user]]
          PropagateAtLaunch: true
        -
          Key: User
          Value: !Ref user
          PropagateAtLaunch: true
      VPCZoneIdentifier: !Ref subnets

  BastionLc:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      AssociatePublicIpAddress: !Ref public
      IamInstanceProfile: !Ref iamprofile
      ImageId: !Ref ami
      InstanceType: t2.micro
      KeyName: !Ref key
      SecurityGroups:
        - !GetAtt BastionSecurityGroup.GroupId
      UserData: 
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          sudo -i -u ec2-user /bin/bash -xe << 'EOF'
          cd bless
          #virtualenv venv
          python3.7 -m venv venv
          source venv/bin/activate
          ssh-keygen -t rsa -b 4096 -f bless-ca -C "SSH CA Key" -N ${password}
          /usr/bin/credstash -r ${AWS::Region} delete bless-ca.pem
          /usr/bin/credstash -r ${AWS::Region} delete bless-ca.pub 
          /usr/bin/credstash -r ${AWS::Region} put -k alias/${kmsalias} bless-ca.pem @bless-ca
          /usr/bin/credstash -r ${AWS::Region} put -k alias/${kmsalias} bless-ca.pub @bless-ca.pub
          aws kms encrypt --region ${AWS::Region} --key-id alias/${kmsalias} --plaintext ${password} --output text --query CiphertextBlob > YourKmsEncryptedPassword.kms
          cp bless/config/bless_deploy_example.cfg bless/config/bless_deploy.cfg
          sed -i 's|us-east-1_password = <INSERT_US-EAST-1_KMS_ENCRYPTED_BASE64_ENCODED_PEM_PASSWORD_HERE>|# |g' bless/config/bless_deploy.cfg
          sed -i "s|us-west-2_password = <INSERT_US-WEST-2_KMS_ENCRYPTED_BASE64_ENCODED_PEM_PASSWORD_HERE>|default_password = $(cat YourKmsEncryptedPassword.kms)|g" bless/config/bless_deploy.cfg
          sed -i 's|<INSERT_YOUR_ENCRYPTED_PEM_FILE_NAME>|bless-ca|g' bless/config/bless_deploy.cfg
          mkdir lambda_configs
          cp bless-ca ./lambda_configs/
          chmod 444 ./lambda_configs/bless-ca
          cp bless/config/bless_deploy.cfg ./lambda_configs/
          make publish
          aws s3 cp publish/bless_lambda.zip s3://${ResultsBucket}
          lambdaExists=$(aws lambda list-functions --region ${AWS::Region} --query 'Functions[?FunctionName==`blesskor-bastion`]' --output text)
          if [ "$lambdaExists" != "" ]; then aws lambda delete-function --region ${AWS::Region} --function-name blesskor-bastion; fi
          aws lambda create-function --region ${AWS::Region} --function-name blesskor-bastion --runtime python2.7 --timeout 10 --role arn:aws:iam::${AWS::AccountId}:role/BastionLambdaIamRole --handler bless_lambda.lambda_handler --code S3Bucket=${ResultsBucket},S3Key=bless_lambda.zip
          aws s3 rm s3://${ResultsBucket}/bless_lambda.zip
          EOF
          echo -e '\nTrustedUserCAKeys /etc/ssh/cas.pub' >> /etc/ssh/sshd_config
          cat /home/ec2-user/bless/bless-ca.pub > /etc/ssh/cas.pub
          sudo service sshd restart
          aws ec2 associate-address --region ${AWS::Region} --instance-id $(curl -s -m 60 http://169.254.169.254/latest/meta-data/instance-id) --allocation-id ${EIP.AllocationId}
 
#
# Bucket to push Lambda zip
#

  ResultsBucket:
    Type: AWS::S3::Bucket
    Properties:
      AccessControl: Private

Outputs:
  BastionIp:
   Description: The Public EIP for the Bastion
   Value: !Ref EIP 

