AWSTemplateFormatVersion: '2010-09-09'
Description: 'Creates Boinc fleet layout in an Region with 3 AZ'

# Input Parameters
Parameters:
  amibase:
    Type: String
  capacity:
    Type: String
    Default: 0
  key:
    Type: String
  project:
    Type: String
    Default: test
  sizeec2:
    Type: String
    Default: t2.micro
  zone:
    Type: String
    Default: sethkor.com
  vpc:
    Type: String
  vpcstack:
    Type: String
   
Resources:
 
#
# Need an Internet Gateway
#

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Application
          Value: !Ref AWS::StackName
        - Key: Network
          Value: Public

  GatewayToInternet:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref vpc
      InternetGatewayId: !Ref InternetGateway
      
#
# Create Subnets.  
# We use a /16 subnet for each AZ for the spot fleet.  These are restricted subnets
# We create/24 subnet for each AZ to act as the public subnet.


  APublicFleetSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Join ['', [!Ref 'AWS::Region', 'a']]
      VpcId: !Ref vpc
      CidrBlock: 10.0.1.0/24
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Application
          Value: !Ref AWS::StackId

  BPublicFleetSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Join ['', [!Ref 'AWS::Region', 'b']]
      VpcId: !Ref vpc
      CidrBlock: 10.0.2.0/24
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Application
          Value: !Ref AWS::StackId

  CPublicFleetSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Join ['', [!Ref 'AWS::Region', 'c']]
      VpcId: !Ref vpc
      CidrBlock: 10.0.3.0/24
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Application
          Value: !Ref AWS::StackId      
          
  APrivateFleetSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Join ['', [!Ref 'AWS::Region', 'a']]
      VpcId: !Ref vpc
      CidrBlock: 10.1.0.0/16
      Tags:
        - Key: Application
          Value: !Ref AWS::StackId
          
  BPrivateFleetSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Join ['', [!Ref 'AWS::Region', 'b']]
      VpcId: !Ref vpc
      CidrBlock: 10.2.0.0/16
      Tags:
        - Key: Application
          Value: !Ref AWS::StackId          
          
  CPrivateFleetSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Join ['', [!Ref 'AWS::Region', 'c']]
      VpcId: !Ref vpc
      CidrBlock: 10.3.0.0/16
      Tags:
        - Key: Application
          Value: !Ref AWS::StackId

#
# EIP and Nat Gateway
#
  AEip:
    Type: AWS::EC2::EIP
    DependsOn:
      - GatewayToInternet
    Properties:
      Domain: vpc

#  BEip:
#    Type: AWS::EC2::EIP    
#    DependsOn:
#      - GatewayToInternet
#    Properties:
#      Domain: vpc
#
#  CEip:
#    Type: AWS::EC2::EIP    
#    DependsOn:
#      - GatewayToInternet
#    Properties:
#      Domain: vpc
      
  ANatGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt AEip.AllocationId
      SubnetId: !Ref APublicFleetSubnet
      
#  BNatGateway:
#    Type: AWS::EC2::NatGateway
#    Properties:
#      AllocationId: !GetAtt BEip.AllocationId
#      SubnetId: !Ref BPublicFleetSubnet
#      
#  CNatGateway:
#    Type: AWS::EC2::NatGateway
#    Properties:
#      AllocationId: !GetAtt CEip.AllocationId
#      SubnetId: !Ref CPublicFleetSubnet      
#
# Public Subnet Routing Setup
#

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref vpc
      Tags:
        - Key: Name
          Value: prod-public

  PublicInternetRoute:
    Type: AWS::EC2::Route
    DependsOn: GatewayToInternet
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
      
  APublicSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref APublicFleetSubnet
      RouteTableId: !Ref PublicRouteTable

#  BPublicSubnetRouteTableAssociation:
#    Type: AWS::EC2::SubnetRouteTableAssociation
#    Properties:
#      SubnetId: !Ref BPublicFleetSubnet
#      RouteTableId: !Ref PublicRouteTable
#
#  CPublicSubnetRouteTableAssociation:
#    Type: AWS::EC2::SubnetRouteTableAssociation
#    Properties:
#      SubnetId: !Ref CPublicFleetSubnet
#      RouteTableId: !Ref PublicRouteTable
      
#
# Private Subnet Routing Setup.  This is different to public as we create seperate route tables for each az
# as do not want to traveres az to hit NAT and we have a NAt in each AZ
#

  APrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref vpc
      Tags:
        - Key: Name
          Value: prod-private-a

#  BPrivateRouteTable:
#    Type: AWS::EC2::RouteTable
#    Properties:
#      VpcId: !Ref vpc
#      Tags:
#        - Key: Name
#          Value: prod-private-b
#
#  CPrivateRouteTable:
#    Type: AWS::EC2::RouteTable
#    Properties:
#      VpcId: !Ref vpc
#      Tags:
#        - Key: Name
#          Value: prod-private-c
          
  APrivateInternetRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGateway
    Properties:
      RouteTableId: !Ref APrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref ANatGateway
 
#  BPrivateInternetRoute:
#    Type: AWS::EC2::Route
#    DependsOn: InternetGateway
#    Properties:
#      RouteTableId: !Ref BPrivateRouteTable
#      DestinationCidrBlock: 0.0.0.0/0
#      NatGatewayId: !Ref BNatGateway
#
#  CPrivateInternetRoute:
#    Type: AWS::EC2::Route
#    DependsOn: InternetGateway
#    Properties:
#      RouteTableId: !Ref CPrivateRouteTable
#      DestinationCidrBlock: 0.0.0.0/0
#      NatGatewayId: !Ref CNatGateway
      
  APrivateSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref APrivateFleetSubnet
      RouteTableId: !Ref APrivateRouteTable

#  BPrivateSubnetRouteTableAssociation:
#    Type: AWS::EC2::SubnetRouteTableAssociation
#    Properties:
#      SubnetId: !Ref BPrivateFleetSubnet
#      RouteTableId: !Ref BPrivateRouteTable
#
#  CPrivateSubnetRouteTableAssociation:
#    Type: AWS::EC2::SubnetRouteTableAssociation
#    Properties:
#      SubnetId: !Ref CPrivateFleetSubnet
#      RouteTableId: !Ref CPrivateRouteTable

#
#  Create Bastions.  Place them in an ASG
#
        
  BastionSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Join [-, [!Ref project, !Ref 'AWS::Region',spot-bastion-sg]]
      GroupDescription: Enable SSH access to servers via port 22
      VpcId: !Ref vpc
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 115.69.50.209/32
        - IpProtocol: icmp
          FromPort: 3
          ToPort: 4
          CidrIp: 0.0.0.0/0
          
  BastionAsg:
    Type: AWS::AutoScaling::AutoScalingGroup
    DependsOn:
      - GatewayToInternet
    Properties:
      AvailabilityZones:
        - !Join ['', [!Ref 'AWS::Region', 'a']]
#        - !Join ['', [!Ref 'AWS::Region', 'b']]
#        - !Join ['', [!Ref 'AWS::Region', 'c']]
      DesiredCapacity: !Ref capacity
      HealthCheckGracePeriod: 300
      LaunchConfigurationName: !Ref BastionLc
      MaxSize: 1
      MinSize: !Ref capacity
      Tags:
        -
          Key: node
          Value: bastion
          PropagateAtLaunch: true
        -
          Key: Name
          Value: !Join ['-', [bastion-spot, !Ref project, !Ref 'AWS::Region'] ]
          PropagateAtLaunch: true
      VPCZoneIdentifier:
        - !Ref APublicFleetSubnet
#        - !Ref BPublicFleetSubnet
#        - !Ref CPublicFleetSubnet

  BastionLc:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      AssociatePublicIpAddress: true
      IamInstanceProfile: 
        Fn::ImportValue:
          !Sub '${vpcstack}-BoincServerInstanceProfile' 
      ImageId: !Ref amibase
      InstanceType: !Ref sizeec2
      KeyName: !Ref key
      SecurityGroups:
        - !GetAtt BastionSecurityGroup.GroupId
      UserData: 
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          cli53 rrcreate --replace ${zone} "bastion.spot.${AWS::Region}.${project} 60 A $(ec2-metadata -v | cut -d ' ' -f2 )"
          sudo -u ubuntu credstash get boinc.key > /home/ubuntu/boinc.pem


#
# Spot Fleet Role
#

         
  SpotFleetIamRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - spotfleet.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      RoleName: !Join [-,[!Ref project, SpotFleetIamRole]]
      
  SpotFleetIamPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Join [-, [!Ref project, SpotFleetIamPolicy]]
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - iam:ListRoles
              - iam:PassRoles
              - iam:ListInstanceProfiles
            Resource: '*'
          - Effect: Allow
            Action:
              - ec2:DescribeImages
              - ec2:DescribeSubnets
              - ec2:RequestSpotInstances
              - ec2:TerminateInstances
              - ec2:DescribeInstanceStatus
              - ec2:CreateTags
            Resource: '*'     
      Roles:
        - !Ref SpotFleetIamRole

  SpotSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Join [-, [!Ref project, !Ref 'AWS::Region',spot-fleet-sg]]
      GroupDescription: Enable SSH access to servers via port 22 from bastion
      VpcId: !Ref vpc
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          SourceSecurityGroupId: !GetAtt BastionSecurityGroup.GroupId
        - IpProtocol: icmp
          FromPort: 3
          ToPort: 4
          CidrIp: 0.0.0.0/0
     
Outputs:

 SpotFleetIamRoleArn:
   Description: The SpotFleetIamRole Arn
   Value: !GetAtt SpotFleetIamRole.Arn  
   Export:
     Name: !Join [ "-", [ !Ref "AWS::StackName", SpotFleetIamRoleArn ] ]
 ABoincPrivateFleetSubnet:
   Description: The name of APrivateFleetSubnet
   Value: !Ref APrivateFleetSubnet
   Export:
     Name: !Join [ "-", [ !Ref "AWS::StackName", APrivateFleetSubnet ] ]
 BBoincPrivateFleetSubnet:
   Description: The name of BPrivateFleetSubnet
   Value: !Ref BPrivateFleetSubnet 
   Export:
     Name: !Join [ "-", [ !Ref "AWS::StackName", BPrivateFleetSubnet ] ]
 CBoincPrivateFleetSubnet:
   Description: The name of CPrivateFleetSubnet
   Value: !Ref CPrivateFleetSubnet 
   Export:
     Name: !Join [ "-", [ !Ref "AWS::StackName", CPrivateFleetSubnet ] ]
 SpotSecurityGroup:
   Description: The ID of SpotSecurityGroup
   Value: !GetAtt SpotSecurityGroup.GroupId 
   Export:
     Name: !Join [ "-", [ !Ref "AWS::StackName", SpotSecurityGroupId ] ]


